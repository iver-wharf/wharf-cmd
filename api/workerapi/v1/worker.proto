syntax = "proto3";
import "google/protobuf/timestamp.proto";

// Versioning via package name, for future-proofing
package wharf.worker.v1;

option go_package = "github.com/iver-wharf/wharf-cmd/api/workerapi/v1";

service Worker {
  rpc StreamLogs(StreamLogsRequest) returns (stream StreamLogsResponse);
  rpc Log(LogRequest) returns (stream LogResponse);
  rpc StatusEvent(StatusEventRequest) returns (stream StatusEventResponse);
  rpc ArtifactEvent(ArtifactEventRequest) returns (stream ArtifactEventResponse);
}

// Empty messages, but exists for potential future usages
message StreamLogsRequest {
  int32 chunkSize = 1;
}
message LogRequest { }
message StatusEventRequest { }
message ArtifactEventRequest { }

message LogResponse {
  uint64 logID = 1; // not DB value; worker's own ID of the log line
  uint64 stepID = 2; // not DB value; worker's own ID of the step ID
  google.protobuf.Timestamp timestamp = 3;
  string line = 4;
}

message StatusEventResponse {
  uint64 eventID = 1; // not DB value; worker's own ID of the event
  uint64 stepID = 2; // not DB value; worker's own ID of the step ID

  enum Status {
    UNKNOWN = 0;
    NONE = 1;
    SCHEDULING = 2;
    INITIALIZING = 3;
    RUNNING = 4;
    SUCCESS = 5;
    FAILED = 6;
    CANCELLED = 7;
  }
  Status status = 3;
}

message ArtifactEventResponse {
  uint32 artifactID = 1; // not DB value; worker's own ID of the artifact
  uint32 stepID = 2; // not DB value; worker's own ID of the step ID
  string name = 3;
}

message StreamLogsResponse {
  repeated LogLine logs = 1;
}

message LogLine {
  uint64 logID = 1; // not DB value; worker's own ID of the log line
  uint64 stepID = 2; // not DB value; worker's own ID of the step ID
  google.protobuf.Timestamp timestamp = 3;
  string line = 4;
}
