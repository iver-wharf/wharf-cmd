syntax = "proto3";

// Versioning via package name, for future-proofing
package wharf.worker.v1;

import "google/protobuf/timestamp.proto";
import "patch/go.proto";

option (go.lint).all = true;
option (go.lint).initialisms = "ID";

option go_package = "github.com/iver-wharf/wharf-cmd/api/workerapi/v1";

service Worker {
  rpc StreamLogs(StreamLogsRequest)
    returns (stream StreamLogsResponse);

  rpc StreamStatusEvents(StreamStatusEventsRequest)
    returns (stream StreamStatusEventsResponse);

  rpc StreamArtifactEvents(StreamArtifactEventsRequest)
    returns (stream StreamArtifactEventsResponse);
}

// Empty messages, but exists for potential future usages
message StreamLogsRequest {
}

// Empty messages, but exists for potential future usages
message StreamStatusEventsRequest {
}

// Empty messages, but exists for potential future usages
message StreamArtifactEventsRequest {
}

message StreamLogsResponse {
  // LogID is the worker's own ID of the log line. It's unique per build step
  // for a given build, but may have collisions across multiple steps or builds.
  // Not database value, but instead worker's own ID of the log line.
  uint64 log_id = 1;
  // StepID is the worker's own ID of the step. It's unique for a given build,
  // but may have collisions across multiple builds.
  // Not database value, but instead worker's own ID of the step ID.
  uint64 step_id = 2;
  // Timestamp is when the log line was outputted from the build step.
  google.protobuf.Timestamp timestamp = 3;
  // Message is the log line text.
  string message = 4;
}

message StreamStatusEventsResponse {
  // EventID is the worker's own ID of the event the status.
  uint64 event_id = 1;
  // StepID is the worker's own ID of the step.
  uint64 step_id = 2;
  // Status is the step's status.
  Status status = 3;
}

message StreamArtifactEventsResponse {
  // ArtifactID is the worker's own ID of the artifact. It's unique per build
  // step for a given build, but may have collisions across multiple steps or
  // builds.
  uint64 artifact_id = 1;
  // StepID is the worker's own ID of the build step that produced the
  // artifact.
  uint64 step_id = 2;
  // Name is the name of the artifact.
  string name = 3;
}

enum Status {
  STATUS_UNSPECIFIED = 0;
  STATUS_PENDING = 1;
  STATUS_SCHEDULING = 2;
  STATUS_INITIALIZING = 3;
  STATUS_RUNNING = 4;
  STATUS_SUCCESS = 5;
  STATUS_FAILED = 6;
  STATUS_CANCELLED = 7;
}
