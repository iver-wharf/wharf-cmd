// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerClient interface {
	StreamLogs(ctx context.Context, in *StreamLogsRequest, opts ...grpc.CallOption) (Worker_StreamLogsClient, error)
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (Worker_LogClient, error)
	StatusEvent(ctx context.Context, in *StatusEventRequest, opts ...grpc.CallOption) (Worker_StatusEventClient, error)
	ArtifactEvent(ctx context.Context, in *ArtifactEventRequest, opts ...grpc.CallOption) (Worker_ArtifactEventClient, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) StreamLogs(ctx context.Context, in *StreamLogsRequest, opts ...grpc.CallOption) (Worker_StreamLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[0], "/wharf.worker.v1.Worker/StreamLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerStreamLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_StreamLogsClient interface {
	Recv() (*StreamLogsResponse, error)
	grpc.ClientStream
}

type workerStreamLogsClient struct {
	grpc.ClientStream
}

func (x *workerStreamLogsClient) Recv() (*StreamLogsResponse, error) {
	m := new(StreamLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (Worker_LogClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[1], "/wharf.worker.v1.Worker/Log", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_LogClient interface {
	Recv() (*LogResponse, error)
	grpc.ClientStream
}

type workerLogClient struct {
	grpc.ClientStream
}

func (x *workerLogClient) Recv() (*LogResponse, error) {
	m := new(LogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) StatusEvent(ctx context.Context, in *StatusEventRequest, opts ...grpc.CallOption) (Worker_StatusEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[2], "/wharf.worker.v1.Worker/StatusEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerStatusEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_StatusEventClient interface {
	Recv() (*StatusEventResponse, error)
	grpc.ClientStream
}

type workerStatusEventClient struct {
	grpc.ClientStream
}

func (x *workerStatusEventClient) Recv() (*StatusEventResponse, error) {
	m := new(StatusEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) ArtifactEvent(ctx context.Context, in *ArtifactEventRequest, opts ...grpc.CallOption) (Worker_ArtifactEventClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[3], "/wharf.worker.v1.Worker/ArtifactEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerArtifactEventClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_ArtifactEventClient interface {
	Recv() (*ArtifactEventResponse, error)
	grpc.ClientStream
}

type workerArtifactEventClient struct {
	grpc.ClientStream
}

func (x *workerArtifactEventClient) Recv() (*ArtifactEventResponse, error) {
	m := new(ArtifactEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkerServer is the server API for Worker service.
// All implementations must embed UnimplementedWorkerServer
// for forward compatibility
type WorkerServer interface {
	StreamLogs(*StreamLogsRequest, Worker_StreamLogsServer) error
	Log(*LogRequest, Worker_LogServer) error
	StatusEvent(*StatusEventRequest, Worker_StatusEventServer) error
	ArtifactEvent(*ArtifactEventRequest, Worker_ArtifactEventServer) error
	mustEmbedUnimplementedWorkerServer()
}

// UnimplementedWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (UnimplementedWorkerServer) StreamLogs(*StreamLogsRequest, Worker_StreamLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogs not implemented")
}
func (UnimplementedWorkerServer) Log(*LogRequest, Worker_LogServer) error {
	return status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedWorkerServer) StatusEvent(*StatusEventRequest, Worker_StatusEventServer) error {
	return status.Errorf(codes.Unimplemented, "method StatusEvent not implemented")
}
func (UnimplementedWorkerServer) ArtifactEvent(*ArtifactEventRequest, Worker_ArtifactEventServer) error {
	return status.Errorf(codes.Unimplemented, "method ArtifactEvent not implemented")
}
func (UnimplementedWorkerServer) mustEmbedUnimplementedWorkerServer() {}

// UnsafeWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServer will
// result in compilation errors.
type UnsafeWorkerServer interface {
	mustEmbedUnimplementedWorkerServer()
}

func RegisterWorkerServer(s grpc.ServiceRegistrar, srv WorkerServer) {
	s.RegisterService(&Worker_ServiceDesc, srv)
}

func _Worker_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).StreamLogs(m, &workerStreamLogsServer{stream})
}

type Worker_StreamLogsServer interface {
	Send(*StreamLogsResponse) error
	grpc.ServerStream
}

type workerStreamLogsServer struct {
	grpc.ServerStream
}

func (x *workerStreamLogsServer) Send(m *StreamLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Worker_Log_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).Log(m, &workerLogServer{stream})
}

type Worker_LogServer interface {
	Send(*LogResponse) error
	grpc.ServerStream
}

type workerLogServer struct {
	grpc.ServerStream
}

func (x *workerLogServer) Send(m *LogResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Worker_StatusEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatusEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).StatusEvent(m, &workerStatusEventServer{stream})
}

type Worker_StatusEventServer interface {
	Send(*StatusEventResponse) error
	grpc.ServerStream
}

type workerStatusEventServer struct {
	grpc.ServerStream
}

func (x *workerStatusEventServer) Send(m *StatusEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Worker_ArtifactEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ArtifactEventRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).ArtifactEvent(m, &workerArtifactEventServer{stream})
}

type Worker_ArtifactEventServer interface {
	Send(*ArtifactEventResponse) error
	grpc.ServerStream
}

type workerArtifactEventServer struct {
	grpc.ServerStream
}

func (x *workerArtifactEventServer) Send(m *ArtifactEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Worker_ServiceDesc is the grpc.ServiceDesc for Worker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Worker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wharf.worker.v1.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLogs",
			Handler:       _Worker_StreamLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Log",
			Handler:       _Worker_Log_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StatusEvent",
			Handler:       _Worker_StatusEvent_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ArtifactEvent",
			Handler:       _Worker_ArtifactEvent_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/workerapi/v1/worker.proto",
}
