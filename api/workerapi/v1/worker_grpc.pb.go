// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerClient interface {
	StreamLogs(ctx context.Context, in *StreamLogsRequest, opts ...grpc.CallOption) (Worker_StreamLogsClient, error)
	Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (Worker_LogsClient, error)
	StatusEvents(ctx context.Context, in *StatusEventsRequest, opts ...grpc.CallOption) (Worker_StatusEventsClient, error)
	ArtifactEvents(ctx context.Context, in *ArtifactEventsRequest, opts ...grpc.CallOption) (Worker_ArtifactEventsClient, error)
}

type workerClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerClient(cc grpc.ClientConnInterface) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) StreamLogs(ctx context.Context, in *StreamLogsRequest, opts ...grpc.CallOption) (Worker_StreamLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[0], "/wharf.worker.v1.Worker/StreamLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerStreamLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_StreamLogsClient interface {
	Recv() (*StreamLogsResponse, error)
	grpc.ClientStream
}

type workerStreamLogsClient struct {
	grpc.ClientStream
}

func (x *workerStreamLogsClient) Recv() (*StreamLogsResponse, error) {
	m := new(StreamLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (Worker_LogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[1], "/wharf.worker.v1.Worker/Logs", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_LogsClient interface {
	Recv() (*LogsResponse, error)
	grpc.ClientStream
}

type workerLogsClient struct {
	grpc.ClientStream
}

func (x *workerLogsClient) Recv() (*LogsResponse, error) {
	m := new(LogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) StatusEvents(ctx context.Context, in *StatusEventsRequest, opts ...grpc.CallOption) (Worker_StatusEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[2], "/wharf.worker.v1.Worker/StatusEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerStatusEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_StatusEventsClient interface {
	Recv() (*StatusEventsResponse, error)
	grpc.ClientStream
}

type workerStatusEventsClient struct {
	grpc.ClientStream
}

func (x *workerStatusEventsClient) Recv() (*StatusEventsResponse, error) {
	m := new(StatusEventsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) ArtifactEvents(ctx context.Context, in *ArtifactEventsRequest, opts ...grpc.CallOption) (Worker_ArtifactEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Worker_ServiceDesc.Streams[3], "/wharf.worker.v1.Worker/ArtifactEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerArtifactEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_ArtifactEventsClient interface {
	Recv() (*ArtifactEventResponse, error)
	grpc.ClientStream
}

type workerArtifactEventsClient struct {
	grpc.ClientStream
}

func (x *workerArtifactEventsClient) Recv() (*ArtifactEventResponse, error) {
	m := new(ArtifactEventResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WorkerServer is the server API for Worker service.
// All implementations must embed UnimplementedWorkerServer
// for forward compatibility
type WorkerServer interface {
	StreamLogs(*StreamLogsRequest, Worker_StreamLogsServer) error
	Logs(*LogsRequest, Worker_LogsServer) error
	StatusEvents(*StatusEventsRequest, Worker_StatusEventsServer) error
	ArtifactEvents(*ArtifactEventsRequest, Worker_ArtifactEventsServer) error
	mustEmbedUnimplementedWorkerServer()
}

// UnimplementedWorkerServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (UnimplementedWorkerServer) StreamLogs(*StreamLogsRequest, Worker_StreamLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamLogs not implemented")
}
func (UnimplementedWorkerServer) Logs(*LogsRequest, Worker_LogsServer) error {
	return status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (UnimplementedWorkerServer) StatusEvents(*StatusEventsRequest, Worker_StatusEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method StatusEvents not implemented")
}
func (UnimplementedWorkerServer) ArtifactEvents(*ArtifactEventsRequest, Worker_ArtifactEventsServer) error {
	return status.Errorf(codes.Unimplemented, "method ArtifactEvents not implemented")
}
func (UnimplementedWorkerServer) mustEmbedUnimplementedWorkerServer() {}

// UnsafeWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServer will
// result in compilation errors.
type UnsafeWorkerServer interface {
	mustEmbedUnimplementedWorkerServer()
}

func RegisterWorkerServer(s grpc.ServiceRegistrar, srv WorkerServer) {
	s.RegisterService(&Worker_ServiceDesc, srv)
}

func _Worker_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).StreamLogs(m, &workerStreamLogsServer{stream})
}

type Worker_StreamLogsServer interface {
	Send(*StreamLogsResponse) error
	grpc.ServerStream
}

type workerStreamLogsServer struct {
	grpc.ServerStream
}

func (x *workerStreamLogsServer) Send(m *StreamLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Worker_Logs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).Logs(m, &workerLogsServer{stream})
}

type Worker_LogsServer interface {
	Send(*LogsResponse) error
	grpc.ServerStream
}

type workerLogsServer struct {
	grpc.ServerStream
}

func (x *workerLogsServer) Send(m *LogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Worker_StatusEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StatusEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).StatusEvents(m, &workerStatusEventsServer{stream})
}

type Worker_StatusEventsServer interface {
	Send(*StatusEventsResponse) error
	grpc.ServerStream
}

type workerStatusEventsServer struct {
	grpc.ServerStream
}

func (x *workerStatusEventsServer) Send(m *StatusEventsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Worker_ArtifactEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ArtifactEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).ArtifactEvents(m, &workerArtifactEventsServer{stream})
}

type Worker_ArtifactEventsServer interface {
	Send(*ArtifactEventResponse) error
	grpc.ServerStream
}

type workerArtifactEventsServer struct {
	grpc.ServerStream
}

func (x *workerArtifactEventsServer) Send(m *ArtifactEventResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Worker_ServiceDesc is the grpc.ServiceDesc for Worker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Worker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wharf.worker.v1.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamLogs",
			Handler:       _Worker_StreamLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Logs",
			Handler:       _Worker_Logs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StatusEvents",
			Handler:       _Worker_StatusEvents_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ArtifactEvents",
			Handler:       _Worker_ArtifactEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/workerapi/v1/worker.proto",
}
