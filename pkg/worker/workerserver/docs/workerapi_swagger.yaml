definitions:
  problem.Response:
    properties:
      detail:
        description: |-
          Detail is a human-readable explanation specific to this occurrence of the
          problem.

          Recommended to have proper punctuation, and be capitalized,
          like a sentence. Compared to Title this field may stretch on and be
          longer.
        example: Build requires input variable 'myInput' to be of type 'string', but
          got 'int' instead.
        type: string
      errors:
        description: |-
          Error is an extended field for the regular Problem model defined in
          RFC-7807. It contains the string message of the error (if any).
        example:
        - 'strconv.ParseUint: parsing "-1": invalid syntax'
        items:
          type: string
        type: array
      instance:
        description: |-
          Instance is a URI reference that identifies the specific occurrence of
          the problem. It may or may not yield further information if dereferenced.
        example: /projects/12345/builds/run/6789
        type: string
      status:
        description: |-
          Status is the HTTP status code generated by the origin server for this
          occurrence of the problem.
        example: 400
        type: integer
      title:
        description: |-
          Title is a short, human-readable summary of the problem type.
          It SHOULD NOT change from occurrence to ocurrence of the problem, except
          for purposes of localization.

          Recommended to be kept brief, have proper punctuation, and be
          capitalized, like a short sentence.
        example: Invalid input variable for build.
        type: string
      type:
        description: |-
          Type is a URI reference that identifies the problem type. The IETF
          RFC-7807 specification encourages that, when dereferenced, it provide
          human-readable documentation for the problem type (e.g., using HTML).
          When this member is not present, its value is assumed to be
          "about:blank".
        example: https://wharf.iver.com/#/prob/build/run/invalid-input
        type: string
    type: object
  workerserver.Ping:
    properties:
      message:
        example: pong
        type: string
    type: object
info:
  contact:
    email: wharf@iver.se
    name: Iver wharf-cmd support
    url: https://github.com/iver-wharf/wharf-cmd/issues
  description: |-
    REST API for wharf-cmd to access build results.
    Please refer to the gRPC API for more endpoints.
  license:
    name: MIT
    url: https://github.com/iver-wharf/wharf-cmd/blob/master/LICENSE
  title: Wharf worker API
  version: v0.9.0
paths:
  /:
    get:
      description: |-
        Pong.
        Added in v0.8.0.
      operationId: ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/workerserver.Ping'
      summary: Ping
      tags:
      - meta
  /api/artifact/{artifactId}/download:
    post:
      description: Added in v0.8.0.
      operationId: downloadArtifact
      parameters:
      - description: Artifact ID
        in: path
        minimum: 0
        name: artifactId
        required: true
        type: integer
      produces:
      - application/octet-stream
      responses:
        "200":
          description: OK
          schema:
            type: file
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/problem.Response'
        "404":
          description: Cannot find artifact
          schema:
            $ref: '#/definitions/problem.Response'
        "502":
          description: Canont read artifact file
          schema:
            $ref: '#/definitions/problem.Response'
      summary: Download an artifact file.
      tags:
      - worker
swagger: "2.0"
